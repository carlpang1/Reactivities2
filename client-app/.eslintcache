[{"C:\\Code\\Reactivities2\\client-app\\src\\index.tsx":"1","C:\\Code\\Reactivities2\\client-app\\src\\reportWebVitals.ts":"2","C:\\Code\\Reactivities2\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Code\\Reactivities2\\client-app\\src\\features\\nav\\NavBar.tsx":"4","C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx":"8","C:\\Code\\Reactivities2\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Code\\Reactivities2\\client-app\\src\\app\\layout\\LoadingComponenet.tsx":"10","C:\\Code\\Reactivities2\\client-app\\src\\stores\\activityStore.ts":"11"},{"size":528,"mtime":1611650092819,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":942,"mtime":1611648710479,"results":"15","hashOfConfig":"13"},{"size":858,"mtime":1611224387423,"results":"16","hashOfConfig":"13"},{"size":910,"mtime":1611648205471,"results":"17","hashOfConfig":"13"},{"size":1838,"mtime":1611648205458,"results":"18","hashOfConfig":"13"},{"size":1340,"mtime":1611648935134,"results":"19","hashOfConfig":"13"},{"size":2753,"mtime":1611648205612,"results":"20","hashOfConfig":"13"},{"size":1212,"mtime":1611124598947,"results":"21","hashOfConfig":"13"},{"size":357,"mtime":1611126961554,"results":"22","hashOfConfig":"13"},{"size":3548,"mtime":1611650244578,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s61cpc",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Code\\Reactivities2\\client-app\\src\\index.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\reportWebVitals.ts",[],["50","51"],"C:\\Code\\Reactivities2\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["52"],"import React, { useContext } from \"react\";\r\nimport { Button, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport ActivityStore from \"../../../stores/activityStore\";\r\n\r\nconst ActivityList: React.FC = () => {\r\n  const activityStore = useContext(ActivityStore);\r\n  const {\r\n    selectActivity,\r\n    activitiesByDate,\r\n    deleteActivity,\r\n    submitting,\r\n    target,\r\n  } = activityStore;\r\n  return (\r\n    <Segment clearing>\r\n      <Item.Group divided>\r\n        {activitiesByDate.map((activity) => (\r\n          <Item key={activity.id}>\r\n            <Item.Content>\r\n              <Item.Header as=\"a\">{activity.title}</Item.Header>\r\n              <Item.Meta>{activity.date}</Item.Meta>\r\n              <Item.Description>\r\n                <div>{activity.description}</div>\r\n                <div>\r\n                  {activity.city}, {activity.venue}\r\n                </div>\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                <Button\r\n                  onClick={() => {\r\n                    selectActivity(activity.id);\r\n                  }}\r\n                  floated=\"right\"\r\n                  content=\"View\"\r\n                  color=\"blue\"\r\n                />\r\n                <Button\r\n                  name={activity.id}\r\n                  loading={target === activity.id && submitting}\r\n                  onClick={(e) => {\r\n                    deleteActivity(e, activity.id);\r\n                  }}\r\n                  floated=\"right\"\r\n                  content=\"Delete\"\r\n                  color=\"red\"\r\n                />\r\n                <Label basic content={activity.category} />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx",["53"],"import React, { FormEvent, useContext, useState } from \"react\";\r\nimport { Button, Form, Segment } from \"semantic-ui-react\";\r\nimport { IActivity } from \"./../../../app/models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport ActivityStore from \"../../../stores/activityStore\";\r\n\r\nconst ActivityForm: React.FC = () => {\r\n  const activityStore = useContext(ActivityStore);\r\n  const {\r\n    selectedActivity: initialFormState,\r\n    createActivity,\r\n    submitting,\r\n    editActivity,\r\n    cancelFormOpen,\r\n  } = activityStore;\r\n\r\n  const InitializeForm = () => {\r\n    if (initialFormState) return initialFormState;\r\n    else {\r\n      return {\r\n        id: \"\",\r\n        title: \"\",\r\n        category: \"\",\r\n        description: \"\",\r\n        date: \"\",\r\n        city: \"\",\r\n        venue: \"\",\r\n      };\r\n    }\r\n  };\r\n\r\n  const [activity, setActivity] = useState(InitializeForm);\r\n\r\n  const handleInputChange = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (activity.id.length === 0) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      };\r\n      console.log(newActivity);\r\n      createActivity(newActivity);\r\n    } else editActivity(activity);\r\n  };\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n          value={activity.title}\r\n        />\r\n        <Form.TextArea\r\n          onChange={handleInputChange}\r\n          name=\"description\"\r\n          rows={2}\r\n          placeholder=\"Description\"\r\n          value={activity.description}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"category\"\r\n          placeholder=\"Category\"\r\n          value={activity.category}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"date\"\r\n          type=\"datetime-local\"\r\n          placeholder=\"Date\"\r\n          value={activity.date}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"city\"\r\n          placeholder=\"City\"\r\n          value={activity.city}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"venue\"\r\n          placeholder=\"Venue\"\r\n          value={activity.venue}\r\n        />\r\n        <Button\r\n          loading={submitting}\r\n          floated=\"right\"\r\n          positive\r\n          content=\"Submit\"\r\n        />\r\n        <Button onClick={cancelFormOpen} floated=\"right\" content=\"Cancel\" />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Code\\Reactivities2\\client-app\\src\\app\\api\\agent.ts",["54"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { IActivity } from \"./../models/activity\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n  new Promise<AxiosResponse>((resolve) =>\r\n    setTimeout(() => resolve(response), ms)\r\n  );\r\n\r\nconst requests = {\r\n  get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n  del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n  list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\r\n  detail: (id: string): Promise<IActivity> => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n  update: (activity: IActivity) =>\r\n    requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del(`/activities/${id}`),\r\n};\r\n\r\nexport default {\r\n  Activities,\r\n};\r\n","C:\\Code\\Reactivities2\\client-app\\src\\app\\layout\\LoadingComponenet.tsx",[],"C:\\Code\\Reactivities2\\client-app\\src\\stores\\activityStore.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":3,"column":10,"nodeType":"61","messageId":"62","endLine":3,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":3,"column":10,"nodeType":"61","messageId":"62","endLine":3,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":31,"column":1,"nodeType":"65","endLine":33,"endColumn":3},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'IActivity' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]